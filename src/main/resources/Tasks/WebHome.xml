<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>Tasks</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Main.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1393842590000</creationDate>
  <date>1394202505000</date>
  <contentUpdateDate>1394202329000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>Tasks.WebHome</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>c8833f41-6c58-4a55-b00d-d9699a1812bf</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/*
 * There is different possibilities for this file depending of the compatibilities of the webbrowser.
 * Branch 1 is compatible
 * Branch 2 use CSS3 capabilities
 */
#set($compatible = true)
.task-list-category {
  display: inline-block;
  top: 0;
  width: 24%;
  vertical-align: top;
  margin-top: 3ex;
  margin-bottom: 3ex;
  padding: 0.5ex;
}
.task-list-category::before {
  text-align: center;
  font-size: 120%;
}
.task-list-category.status-late::before {
  content: "$services.localization.render('TaskCode.TaskClass_status_late')";
  color: red;
}
.task-list-category.status-todo::before {
  content: "$services.localization.render('TaskCode.TaskClass_status_todo')";
  text-align: center;
  color: #2173AF;
}
.task-list-category.status-inprogress::before {
  content: "$services.localization.render('TaskCode.TaskClass_status_inprogress')";
  text-align: center;
  color: green;
}
.task-list-category.status-done::before {
  content: "$services.localization.render('TaskCode.TaskClass_status_done')";
  text-align: center;
  color: gray;
}
.task-list-category .task-card {
  margin-top: -1.5ex;
  #if($compatible)
  transition: margin 0.25s ease-in-out;
  #else
  transition: transform 0.25s ease-in-out;
  #end
}
.task-list-category .task-card:first-child {
  margin-top: 0ex;
}

#if($compatible)
.task-list-category .task-card:hover {
  margin-top: -3.25ex;
  margin-bottom: 1.75ex;
  z-index:5;
}
.task-list-category .task-card:first-child:hover {
  margin-top: -1.75ex;
  margin-bottom: 1.75ex;
}
#else
.task-list-category .task-card:hover {
  transform: translateY(-1.75ex);
  z-index:5;
}
#end

.task-card .task-card-title::before {
  display: block;
  font-size: 80%;
}
.task-card.status-late .task-card-title::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_late')] ";
  color: red;
}
.task-card.status-todo .task-card-title::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_todo')] ";
  color: #2173AF;
}
.task-card.status-inprogress .task-card-title::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_inprogress')] ";
  color: green;
}
.task-card.status-done .task-card-title::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_done')] ";
  color: gray;
}
.task-card {
  display: inline-block;
  width: 90%;
  background: white;

  margin: 0px;
  padding-top: 0.5ex;
  padding-bottom :1ex;
  padding-left: 5%;
  padding-right: 5%;

  border-style: solid;
  border-width: 1px;
  border-color: gray;
  border-radius: 1ex;
}

.task-card.status-late:hover {
  box-shadow: 0.5em 0.5ex 0.5ex #E0E0E0, inset 0em 0ex 1ex #FF8080;
}
.task-card.status-todo:hover {
  box-shadow: 0.5em 0.5ex 0.5ex #E0E0E0, inset 0em 0ex 1ex #2173AF;
}
.task-card.status-inprogress:hover {
  box-shadow: 0.5em 0.5ex 0.5ex #E0E0E0, inset 0em 0ex 1ex #80C000;
}
.task-card.status-done:hover {
  box-shadow: 0.5em 0.5ex 0.5ex #E0E0E0, inset 0em 0ex 1ex #808080;
}

.task-card-subtasks {
  display: block;
  width: 100%;
  height: 1ex;

  margin: 0.5ex;
  padding: 0px;

  line-height: 0px;

  color: black;
}
.task-card-subtasks-status {
  display: inline-block;
  width: 1.5em;
  height: 1ex;

  margin: 0px;
  margin-right: 0.1em;
  padding: 0px;

  border-style: none;
  border-radius: 1ex;
}
.task-card-subtasks-status .tooltip {
  position: absolute;
  width: 15em;
  z-index: 10;

  margin: 0em;
  padding: 0.5em;

  background: #FFFFFF;
  border-style: solid;
  border-radius: 1ex;
  border-width: 0.33ex;

  opacity: 0;

  #if($compatible)
  font-size: 0%;
  transition: font-size 0.25s ease-in-out;
  #else
  font-size: 90%;
  transform-origin: top left;
  transform: scale(0.5, 0);
  transition: transform 0.25s ease-in-out;
  #end
}
#if($compatible)
.task-card-subtasks-status .tooltip img {
  max-height: 0ex;
  transition: max-height 0.25s ease-in-out;
}
#end
.task-card-subtasks-status:hover .tooltip {
  opacity: 0.9;
  #if($compatible)
  font-size: 90%;
  #else
  transform: scale(1, 1);
  #end
}
.task-card-subtasks-status:hover .tooltip img {
  max-height: 5ex;
}
.task-card-subtasks .status-late {
  background: red;
}
.task-card-subtasks .status-late .tooltip {
  border-color: red;
  box-shadow: 0.5em 0.5ex 0.5ex #FFE0E0;
}
.task-card-subtasks .status-late .tooltip::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_late')] ";
  color: red;
}
.task-card-subtasks .status-todo {
  background: #2173AF;
}
.task-card-subtasks .status-todo .tooltip {
  border-color: #2173AF;
  box-shadow: 0.5em 0.5ex 0.5ex #71C3FF;
}
.task-card-subtasks .status-todo .tooltip::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_todo')] ";
  color: #2173AF;
}
.task-card-subtasks .status-inprogress {
  background: green;
}
.task-card-subtasks .status-inprogress .tooltip {
  border-color: green;
  box-shadow: 0.5em 0.5ex 0.5ex #E0FFE0;
}
.task-card-subtasks .status-inprogress .tooltip::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_inprogress')] ";
  color: green;
}
.task-card-subtasks .status-done {
  background: gray;
}
.task-card-subtasks .status-done .tooltip {
  border-color: gray;
  box-shadow: 0.5em 0.5ex 0.5ex #E0E0E0;
}
.task-card-subtasks .status-done .tooltip::before {
  content: "[$services.localization.render('TaskCode.TaskClass_status_done')] ";
  color: gray;
}

.task-card-title {
  color: #2173AF;
  text-align: center;
  font-size: 120%;
}

.task-card-duedate {
  color: gray;
  text-align: left;
  font-size: 60%;
}

.task-card-assignees {
  margin-top: 1ex;
}
.task-card-assignee {
  display: inline-block;
  padding: 0.2em;
  width: 2.5em;

  border-style: solid;
  border-color: white;
  border-width: 0.1ex;
  border-radius: 1ex;
}
.task-card-assignee img {
  height: 5ex;
  background-position: center center;
}
.task-card-assignee .tooltip {
  display: block;
  position: absolute;
  z-index: 10;

  margin-left: -0.5ex;
  margin-top: -5.875ex;
  padding: 0.25ex;

  background: white;
  box-shadow: 0.5em 0.5ex 0.5ex #E0E0E0;

  border-style: solid;
  border-color: gray;
  border-width: 0.25ex;
  border-radius: 1ex;

  opacity: 0;

  #if($compatible)
  max-width: 0em;
  font-size: 0%;
  transition: max-width 0.25s ease-in-out, font-size 0.25s ease-in-out;
  #else
  font-size: 100%;
  transform-origin: left center;
  transform: scaleX(0);
  transition: transform 0.25s ease-in-out;
  #end
}
.task-card-assignee:hover .tooltip {
  opacity: 0.9;
  #if($compatible)
  max-width: 20em;
  font-size: 100%;
  #else
  transform: scaleX(1);
  #end
}</code>
    </property>
    <property>
      <name>Task card style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>Tasks.WebHome</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>d5524425-40f4-4148-bd67-8da9a6b11d7f</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/*
 * There is different possibilities for this file depending of the compatibilities of the webbrowser.
 * Branch 1 is compatible
 * Branch 2 use CSS3 capabilities
 */
#set($compatible = true)
.task-timeline-task .task-card.tooltip {
  display: block;
  position: absolute;
  width: 100%;
  min-width: 15em;

  margin: 0em;
  margin-top: -0.66ex;
  padding: 0.5em;

  background: #FFFFFF;

  opacity: 0;

  #if($compatible)
  font-size: 0%;
  transition: font-size 0.25s ease-in-out;
  #else
  font-size: 100%;
  transform-origin: top;
  transform: scaleY(0);
  transition: transform 0.25s ease-in-out;
  #end
}
.task-timeline-task:hover .task-card.tooltip {
  opacity: 1;
  z-index: 5;
  #if($compatible)
  font-size: 100%;
  #else
  transform: scaleY(1);
  #end
}
.task-timeline-task-date {
  font-size: 50%;
  color: gray;
  text-align: right;
}
.task-timeline-task-bar {
  border-style: solid;
  border-radius: 1ex;
  border-width: 0.33ex;
  height: 0ex;
  margin: 0em;
  padding: 0em;

  background: #FFFFFF;
}
.task-timeline-task.status-late .task-timeline-task-bar {
  border-color: red;
}
.task-timeline-task.status-todo .task-timeline-task-bar {
  border-color: #2173AF;
}
.task-timeline-task.status-inprogress .task-timeline-task-bar {
  border-color: green;
}
.task-timeline-task.status-done .task-timeline-task-bar {
  border-color: gray;
}</code>
    </property>
    <property>
      <name>Timeline style</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <name>Tasks.WebHome</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>4f4b1427-fe0d-49a4-9545-06993fe567ac</guid>
    <property>
      <content/>
    </property>
    <property>
      <extensionPointId>org.xwiki.platform.panels.Applications</extensionPointId>
    </property>
    <property>
      <name>platform.panels.TaskManagerApplication</name>
    </property>
    <property>
      <parameters>label=$services.localization.render('TaskCode.TaskPanel_title')
target=Tasks.WebHome
icon=icon:calendar_view_month</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
  <content>= {{translation key="Tasks.WebHome.title" /}} =

{{velocity}}
#set($taskName = $xwiki.getUniquePageName('Tasks', 'Task'))
#set($taskURL = $xwiki.getURL($taskName, 'edit'))

{{html}}
&lt;form id="task-create" method="GET" action="$taskURL"&gt;
  &lt;input type="hidden" id="template" name="template" value="TaskCode.TaskTemplate" /&gt;
  &lt;input type="hidden" id="TaskCode.TaskClass_0_reporter" name="TaskCode.TaskClass_0_reporter" value="$xcontext.user" /&gt;
  &lt;input type="submit" form="task-create" class="button" value="$services.localization.render('Tasks.WebHome.add_a_new_task')" /&gt;
&lt;/form&gt;
{{/html}}

{{/velocity}}

== {{translation key="Tasks.WebHome.list_of_tasks" /}} ==

{{velocity}}
################################################
################ COMPUTE MACROS ################
################################################
#### MACRO computeTimelineTask
## @task[TaskCode.TaskClass] Task to be computed
##
## Compute the timeline which will appear above the list of tasks
## It calculates the duration of each task to calculate the size of the proportional block which will be display
## The starting date of tasks is the date of creation of the corresponding page
## The tasks in late are displayed at the beginning of the line (i.e. today instead of their starting date) with a predefined size
#macro(computeTimelineTask $task)
  #set($today = $datetool.date)
  #set($onedayduration = 86400000.0)
  #set($totalduration = 120.0*$onedayduration)
  #set($taskstatus = $task.getProperty('status').value)
  #set($taskduedate = $task.getProperty('duedate').value)
  #set($taskstartdate = $xwiki.getDocument($task.getName()).getContentUpdateDate())
  #if(($taskstatus != 'done' || $taskduedate.after($datetool.date)) &amp;&amp; $taskduedate.time &lt; $today.time + $totalduration)
    #if($taskstartdate.after($today))
      #set($taskstart = $taskstartdate.time)
    #else
      #set($taskstart = $today.time)
    #end
    #set($taskend = $taskduedate.time)
    #set($taskduration = $taskend - $taskstart)
    #set($taskwidth = 100*$taskduration/$totalduration)
    #set($taskoffset = 100*($taskstart - $today.time)/$totalduration)
    #if($taskduedate.before($today.time)) ## Place late task at the beginning of the line and define a size
      #set($taskoffset = 0)
      #set($taskwidth = 5)
      #set($taskstatus = 'late')
    #end
    #if($taskstatus != 'done' &amp;&amp; $taskduedate.before($datetool.date))
      #set($classname = 'status-late')
    #else
      #set($classname = "status-${taskstatus}")
    #end
    #displayTimelineForTask($task, $taskwidth, $taskoffset, $taskstatus, $taskstart, $taskend)
  #end
#end
#### MACRO computeCardDependencies
## @task[TaskCode.TaskClass] Task to be computed
##
## Compute and order by status the dependencies of the task
#macro(computeCardDependencies $task)
  #set($taskdependencies = $task.getProperty('dependencies').value)
  #set($deptaskslist = {})
  #set($discard = $deptaskslist.put('late', []))
  #foreach($s in $xwiki.getPropertyClassFromName('TaskCode.TaskClass_status').getListValues())
    #set($discard = $deptaskslist.put($s, []))
  #end
  #foreach($dtaskid in $taskdependencies)
    #set($dtaskpageref = $services.model.resolveDocument($dtaskid))
    #set($dtaskpage = $xwiki.getDocument($dtaskpageref))
    #set($dtask = $dtaskpage.getObject('TaskCode.TaskClass'))
    #set($dtaskstatus = $dtask.getProperty('status').value)
    #set($dtaskduedate = $dtask.getProperty('duedate').value)
    #if($dtaskduedate.before($datetool.date) &amp;&amp; $dtaskstatus != 'done')
      #set($dtaskstatus = 'late')
    #end
    #set($discard = $deptaskslist.get($dtaskstatus).add($dtask))
  #end
  #displayCardDependencies($deptaskslist)
#end
#### MACRO computeCardTitle
## $task[TaskCode.TaskClass] task to be computed
##
## Extract the title data
#macro(computeCardTitle $task)
  #set($tasktitle = $task.getProperty('title').value)
  #set($tasklink = $task.getName())
  #displayCardTitle($tasktitle, $tasklink)
#end
#### MACRO computeCardDueDate
## $task[TaskCode.TaskClass] task to be computed
##
## Extract the due date data
#macro(computeCardDueDate $task)
  #set($taskduedate = $task.get('duedate'))
  #displayCardDueDate($taskduedate)
#end
#### MACRO computeCardAssignees
## $task[TaskCode.TaskClass] task to be computed
##
## Extract the assignees data to create a list
#macro(computeCardAssignees $task)
  #set($taskassignee = $task.getProperty('assignee').value)
  #set($taskassignees = [])
  #foreach($a in $taskassignee.split(','))
    #set($assigneepageref = $services.model.resolveDocument($a))
    #set($assigneepage = $xwiki.getDocument($assigneepageref))
    #set($assignee = $assigneepage.getObject('XWiki.XWikiUsers'))
    #set($discard = $taskassignees.add($assignee))
  #end
  #displayCardAssignees($taskassignees)
#end
################################################
################ DISPLAY MACROS ################
################################################
#### MACRO displayTimelineForTask
## @task[TaskCode.TaskClass] Task to be computed
## @taskwidth[float] Size in percent of the parent element of the task block
## @taskoffset[float] Offset in percent from the left border for the task block
## @taskstatus[String] Status of the task ('todo', 'inprogress', 'done' or 'late')
## @taskstarttime[long] Timestamp of the start date of the task
## @taskenddtime[long] Timestamp of the end date of the task
##
## Display a colored bar for one task; there will be also a tooltip on each bar displaying the task as a card
#macro(displayTimelineForTask $task $taskwidth $taskoffset $taskstatus $taskstarttime $taskenddtime)
  (% class="task-timeline-task status-${taskstatus}" style="display: block;position: relative;margin: 0.5ex;width: ${taskwidth}%;left: ${taskoffset}%;" %)
  (((
    (% class="task-timeline-task-date" %)
    (((
      $datetool.whenIs($taskenddtime)
    )))
    (% class="task-timeline-task-bar" %)((()))
    (% class="task-card tooltip status-${taskstatus}" %)
    (((
      #computeCardDependencies($task)
      #computeCardTitle($task)
      #computeCardAssignees($task)
    )))
  )))
#end
#### MACRO displayCardDependencies
## @deptaskslist[Map&lt;String, List&lt;TaskCode.TaskClass&gt;&gt;] List of tasks (TaskCode.TaskClass) ordered by status in a dictionary
##
## Display the status of a task dependency
#macro(displayCardDependencies $deptaskslist)
  (% class="task-card-subtasks" %)
  (((
    #foreach($deptaskslistkey in $deptaskslist.keySet())
      #foreach($task in $deptaskslist.get($deptaskslistkey))
        (% class="task-card-subtasks-status status-${deptaskslistkey}" %)
        (((
          (% class="tooltip" %)
          (((
            [[${task.getProperty('title').value}&gt;&gt;${task.getName()}]]
            (% class="task-card-duedate" %)
            (((
              ${services.localization.render('Tasks.WebHome.due_date_on')} ${task.get('duedate')}
            )))
            (% class="task-card-assignees" %)
            (((
              #foreach($assignee in $task.getProperty('assignee').value.split(','))
                (% class="task-card-assignee user-avatar-wrapper" %)
                (((
                  #largeUserAvatar($assignee)
                )))
              #end
            )))
          )))
        )))
      #end
    #end
  )))
#end
#### MACRO displayCardTitle
## @tasktitle[String] Title of the task
## @tasklink[String] Link (XWiki Syntax compliant) to access the task
##
## Display the title of a task
#macro(displayCardTitle $tasktitle $tasklink)
  (% class="task-card-title" %)
  (((
    [[${tasktitle}&gt;&gt;${tasklink}]]
  )))
#end
#### MACRO displayCardDueDate
## @taskduedate[String] due date of the task
##
## Display the due date of a task
#macro(displayCardDueDate $taskduedate)
  (% class="task-card-duedate" %)
  (((
    ${services.localization.render('Tasks.WebHome.due_date_on')} ${taskduedate}
  )))
#end
#### MACRO displayCardAssignees
## @assignees[List&lt;XWiki.XWikiUsers&gt;] List of assignees
##
## Display the assignees of a task
#macro(displayCardAssignees $assignees)
  (% class="task-card-assignees" %)
  (((
    #foreach($assignee in $taskassignees)
      (% class="task-card-assignee user-avatar-wrapper" %)
      (((
        #largeUserAvatar(${assignee.getName()})
        (% class="tooltip" %)
        (((
          [[#largeUserAvatar(${assignee.getName()})&gt;&gt;$assignee.getName()]]
          [[${assignee.getProperty('first_name').value} ${assignee.getProperty('last_name').value}&gt;&gt;$assignee.getName()]]
        )))
      )))
    #end
  )))
#end
#### MACRO displayCardAssignees
## @taskslist[List&lt;TaskCode.TaskClass&gt;] List of tasks
##
## Display the timeline
#macro(displayTimeline $taskslist)
  (% class="task-timeline" %)
  (((
    #foreach($task in $taskslist)
      #computeTimelineTask($task)
    #end
  )))
#end
#### MACRO displayCardAssignees
## @taskslist[Map&lt;String,List&lt;TaskCode.TaskClass&gt;&gt;] List of tasks order by categories
##
## Display the tasks with column for each category
#macro(displayCategories $taskslist)
  (% class="task-list" %)
  (((
    #foreach($taskslistkey in $taskslist.keySet())
      (% class="task-list-category status-${taskslistkey}" %)
      (((
        #foreach($task in $taskslist.get($taskslistkey))
          (% class="task-card status-${taskslistkey}" %)
          (((
            #computeCardDependencies($task)
            #computeCardTitle($task)
            #computeCardDueDate($task)
            #computeCardAssignees($task)
          )))
        #end
      )))
    #end
  )))
#end
################################################
################# HTML DISPLAY #################
################################################
{{html wiki="true"}}
#set($query = "from doc.object(TaskCode.TaskClass) as task where doc.fullName &lt;&gt; 'TaskCode.TaskTemplate' order by task.duedate")
#set($results = $services.query.xwql($query).execute())
#set($timelinetaskslist = [])
#set($categoriestaskslist = {'late': []})
#set($discard = $categoriestaskslist.put('late', []))
#foreach($s in $xwiki.getPropertyClassFromName('TaskCode.TaskClass_status').getListValues())
  #set($discard = $categoriestaskslist.put($s, []))
#end
#foreach($taskid in $results)
  #set($taskpageref = $services.model.resolveDocument($taskid))
  #set($taskpage = $xwiki.getDocument($taskpageref))
  #set($task = $taskpage.getObject('TaskCode.TaskClass'))
  #set($discard = $timelinetaskslist.add($task)) ## Fill for the timeline
  #set($taskstatus = $task.getProperty('status').value)
  #set($taskduedate = $task.getProperty('duedate').value)
  #if($taskduedate.before($datetool.date) &amp;&amp; $taskstatus != 'done')
    #set($taskstatus = 'late')
  #end
  #set($discard = $categoriestaskslist.get($taskstatus).add($task)) ## Fill for the list
#end
#displayTimeline($timelinetaskslist)
#displayCategories($categoriestaskslist)
{{/html}}

{{/velocity}}</content>
</xwikidoc>
